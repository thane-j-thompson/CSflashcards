[
    {
        "Question": "Q)  What is a database?\r",
        "Answer": "A)  A database is a structured and organized collection of data that is stored electronically, typically on a computer system.\r"
    },
    {
        "Question": "Q)  What is a relational database?\r",
        "Answer": "A)  A relational database is a type of database management system (DBMS) that stores and manages data in a structured manner using tables composed of rows and columns.  \r"
    },
    {
        "Question": "Q)  What are ACID Properties?\r",
        "Answer": "A)  Relational databases adhere to the ACID properties (Atomicity, Consistency, Isolation, Durability)\r"
    },
    {
        "Question": "Q)  What is a Schema?\r",
        "Answer": "A)  The structure of a relational database is defined by a schema, which specifies the tables, columns, data types, contstraints, and relationships between tables.  The schema is the blueprint of database organization and storage. \r"
    },
    {
        "Question": "Q)  What is a database Table?\r",
        "Answer": "A)  In a relational database, a table is a fundamental and central concept.  It is a structured collection of data organized into rows and columns.  Tables are used to store and manage data in a tabular format and they represent specific entitites or concepts with the database schema.\r"
    },
    {
        "Question": "Q)  What is a primary key and how many can one table have?\r",
        "Answer": "A)  A primary key is a fundamental relational database concept.  It is a column or set of columns in a table that uniquely identifies each row (record) with the table.  The primary key ensures there are no duplicates in the table.\r"
    },
    {
        "Question": "Q)  What is a primary key with multiple columns called?\r",
        "Answer": "A)  Composite key.\r"
    },
    {
        "Question": "Q)  What is a Foreign Key and how many can one table have?\r",
        "Answer": "A)  A foreign key is a database constraint used to establish a link or relationship between two tables in a relational database.  A table can have multiple keys depending on the complexity of data model and structure of database.\r"
    },
    {
        "Question": "Q)  What is a SQL Injection Attack and how do you protect yourself against these?\r",
        "Answer": "A)  An SQL Injection Attack is a type of cybersecurity vulnerability that occurs when an attacker is able manipulate an SQL query in a way that allows them to gain unauthorized access to a database. The main design flaw is use of user input in queries.  Steps to project against SQL injection attacks are:  use parameterized statements, input validation, escape user input, least privlege principle, error handling, web applicaiton firewalls (WAF), regular security updates, security testing, developer education, and client side input validation.  \r"
    },
    {
        "Question": "Q)  What is a SQL Server stored procedure?\r",
        "Answer": "A)  A stored procedure is a precompiled and reusable set of SQL statements that are stored on the SQL Server database.  These procedures can be call from a client application or other SQL Server scripts.  Stored procedures are a fundamental feature of SQL Server and widely used.\r"
    },
    {
        "Question": "Q)  What language is used to write Stored procedures?\r",
        "Answer": "A)  Transact-SQL (T-SQL) is the proprietary extension of SQL that is used by MS SQL Server and SAP ASE. \r"
    },
    {
        "Question": "Q) What language do you use to communicate with the database?\r",
        "Answer": "A) The specific language depends on the environment.  SQL is commonly used within the database and with database management clients.  Many languages have database communication libraries to make communication easier. There are many frameworks and libaries. C# has ADO.NET.   Python has Python Database API (DB-API).  There are Object Relational Mapping (ORM) frameworks like Entity Framework for C# and SQLAlchemy for Python. \r"
    },
    {
        "Question": "Q)  What are the different types of statements available to you in TSQL?\r",
        "Answer": "A)  The main statements are SELECT, INSERT, UPDATE, DELETE, MERGE, CREATE, ALTER, DROP, TRUNCATE, and EXECUTE.  These are SQL statement, but T-SQL adds features.  A good example of the added features are the procedural programming constructs such as IF...ELSE, WHILE, BEGIN...END, and error-handling constructs like TRY...CATCH. \r"
    },
    {
        "Question": "Q)  What are in indexes in SQL?\r",
        "Answer": "A)  Indexes in SQL are database objects that are used to improve the speed of data retrieval operations on database tables.  Indexes increase the efficiency of locating and accessing rows within a table.  Indexes are commonly created for primary keys and other unique constraints.\r"
    },
    {
        "Question": "Q)  If you wanted to delete information from a table what statement would you use?\r",
        "Answer": "A)  DELETE statement. In example:  DELETE FROM Table WHERE ColumnFields = 'X';  But question begs to ask what conditions differentiate the information from mere data to be deleted.  \r"
    },
    {
        "Question": "Q)  What is the truncate statement used for?  What is the key difference between this and your other options to remove data? \r",
        "Answer": "A)  TRUNCATE removes all rows in a table.  This is similar to DELETE, but TRUNCATE is faster and doesn't have the rollback feature that DELETE has.\r"
    },
    {
        "Question": "Q)  What are the basic parts of a simple TSQL Query?  \r",
        "Answer": "A)  TSQL statements have the options of these clauses:  SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY, LIMIT or OFFSET or TOP; JOINS, SUBQUERY, UNION.\r"
    },
    {
        "Question": "Q)  When are JOINS used?\r",
        "Answer": "A)  JOINs are used to retrieve data from multiple tables in a relational database.  JOINs combine rows from different tables based on related columns.   Joins are essential for working with normalized databases and querying data across multiple tables.\r"
    },
    {
        "Question": "Q)  What are the different types of JOINs (Write examples of each).\r",
        "Answer": "A)  INNER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN, and FULL JOIN.\r"
    },
    {
        "Question": "Q)  Give example of INNER JOIN?  \r",
        "Answer": "A)  SELECT Customers.CustomerName, Orders.OrderDate FROM Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID.\r"
    },
    {
        "Question": "Q)  Give example of LEFT JOIN or LEFT OUTER JOIN?\r",
        "Answer": "A)  SELECT Customers.CustomerName, Orders.OrderDate FROM Customers LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;\r"
    },
    {
        "Question": "Q)  Give example of RIGHT JOIN or LEFT OUTER JOIN?\r",
        "Answer": "A)  SELECT Customers.CustomerName, Orders.OrderDate FROM Customers RIGHT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;\r"
    },
    {
        "Question": "Q)  Give example of FULL JOIN?\r",
        "Answer": "A)  SELECT Customers.CustomerName, Orders.OrderDate FROM Customers FULL JOIN Orders ON Customers.CustomerID = Orders.CustomerID;\r"
    },
    {
        "Question": "Q)  What is data normalization?\r",
        "Answer": "A)  Data normalization is the database design technique used to organize relational database management systems (RDMS) efficiently and eliminate data redundancy while preserving integrity.  It is through data normalization that we divide the data in two of more tables and establishing primary and foreign keys.\r"
    },
    {
        "Question": "Q)  What is are the data normalization forms?\r",
        "Answer": "A)  First Normal Form (1NF), Second Normal Form (2NF), and Third Normal Form (3NF).\r"
    },
    {
        "Question": "Q)  Why would we go through the process of normalizing out data?\r",
        "Answer": "A)  Reasons are:  eliminate data redundancy, ensure data integrity, improve data consistency, simplify data maintenance, enhance query performace, adaptability, data model clarity, support for concurreny, and apply database design best practices.\r"
    },
    {
        "Question": "Q)  How many normal forms are there?\r",
        "Answer": "A)  Eight:  1NF, 2NF, 3NF, Boyce-Codd Normal Form (BCNF, extends 3NF), 4NF, 5NF, Domain-Key Normal Form (DKNF), and 6NF.\r"
    },
    {
        "Question": "Q)  How do you declare a variable in TSQL?\r",
        "Answer": "A)  DECLARE statement is used to declare and use variables in queries and stored procedures. The basic syntax is DECLARE @variable_name data_type [ = initial_value]; where @varibale_name must have an @; data_type must be INT, VARCHAR, DATE or other; and initial_value is optional assignment of initial value.\r"
    },
    {
        "Question": "Q)  If a stored procedure is too slow how can you enhance the speed?\r",
        "Answer": "A)  There are a number of things to try:  query optimization, indexing, parameter sniffing, statistics & maintenance, caching & memory, partitioning, concurrency & locking, tempdb optimization, hardware & server configuration, profiling & monitoring, stored procedure refactoring, application design, caching at application layer, and scaling. \r"
    },
    {
        "Question": "Q)  What is a SQL Server?\r",
        "Answer": "A)  SQL Server is Microsoft branded software.  SQL Server is a comprehensive relational database management system.\r"
    },
    {
        "Question": "Q)  Consider Bob Smith, who is 30 yo, and has two direct reports: Sally Smith, 30yo; Jane Doe, 34 yo;  There is a .NET model with properties of string FirstName, string LastName, in Age, and Contact[] Reports. If this class was going to participate in Model binding in the MVC request life cycle, is it currently set up to report as invalid when no data is sent to the Server? (Assume FirstName & Last Name are required)\r",
        "Answer": "A)  No, it is not currently setup up to report invalid data.  Reporting can be added to the properties using data annotation. FirstName and LastName could be validated with [Required(ErrorMessage = \"First Name is required\")].  Age could be validated with [Range(0, 150, ErrorMessage = \"Age must be between 0 and 150\")]\r"
    },
    {
        "Question": "Q)  In the case of the above Contact class, what would you have to do to make the Contact model report \"Invalid\" is such a case?\r",
        "Answer": "A)  Further response reporting can be defined in the Controller.cs file under the ActionResult Create(Contact contact) function.  \r"
    },
    {
        "Question": "Q)  In the case of the above Contact class, what namespace do these attributes live in?\r",
        "Answer": "A)  using System.ComponentModel.DataAnnotations;\r"
    },
    {
        "Question": "Q)  What are namespace imports in C#?\r",
        "Answer": "A)  Namespace imports in C# are typically used for accessing classes, types, or libraries that are defined in external namespace.\r"
    },
    {
        "Question": "Q)  In the case of the above Contact class, what are all the different types of validations that attributes let me perform?\r",
        "Answer": "A)  There are at least 10 validations enabled by data annotation.  They include RequiredAttribute, StringLengthAttribute, RangeAttribute, RegularExpressionAttribute, CompareAttribute, CompareAttribute, EmailAddressAttribute, MaxLengthAttribute, MinLengthAttribute, Custom Validation.\r"
    },
    {
        "Question": "Q)  What is model binding in ASP.NET? \r",
        "Answer": "A)  Modeling binding in ASP.NET is a process by which data from various sources, such as HTTP, requests from form submissions, query strings, route data, is automatically mapped to the properties of a strongly typed model object.  This process of making objects makes it easier for developers to work with user input and other data in applications.  \r"
    },
    {
        "Question": "Q)  Why is model binding is it important? \r",
        "Answer": "A)  Model binding simplifies data handling, type safety, reduces boilerplate code, enhanced code readability, supports complex types, integration with validation, customization, supports different sources, supports multiple frameworks, improves productivity, and reduces security risks.\r"
    },
    {
        "Question": "Q)  What are the fundamentals that a developer should consider when working to wire up model binding correctly?\r",
        "Answer": "A)  Model Definition, HTTP Request Sources, Binding Context, Controller Action Parameters, Binding Sources, Validation, Validation Handling, Data Type and Conversions, Custom Model Binders, Binding Behavior Configuration, Complex Models and Collections, Anti-Forgery Tokens, Model Validation vs Business Logic, Testing & Debugging, and Documentation.\r"
    },
    {
        "Question": "Q)  What are the differences between an API Controller and a \"regular/view\" Controller in.NET?\r",
        "Answer": "A)  An API Controller is specialized for exposing data and functionality through web APIs whereas regular controllers are used for generating HTML views and handling user interactions in traditional web applications.\r"
    },
    {
        "Question": "Q)  When creating a new controller, what class do you inherit from?\r",
        "Answer": "A)  You inherit from the class that provides the necessary functionality for handling HTTP requests and managing the controller actions.  A Regular (View) Controller would inherit from the Controller class. An API Controller would inherit from ControllerBase. In ASP.NET Core, you can create controllers that serve both regular views and API endpoints by inheriting from ControllerBase class. This provides a unified controller structure for handling both webpages and API requests. \r"
    },
    {
        "Question": "Q)  Write out the C# function that accepts two numbers, adds these numbers, and returns the result of the addition.\r",
        "Answer": "A)  public static int Sum(int num1, int num2){int total; total = num1 + num2; return total;}  \r"
    },
    {
        "Question": "Q)  Describe the main differences or considerations between JS and C#?\r",
        "Answer": "A)  JS is a scripting languages for building dynamic and interactive web applications.  C# is a statically typed, compiled language used for a wide range of applications including desktop, web, cloud, and game development.  \r"
    },
    {
        "Question": "Q)  What is the generic name of the library used in .NET that is used to communicate with databases?\r",
        "Answer": "A)  ADO.NET, or Active Data Objects for .NET.  ADO.NET is a set of classes and libraries provided by Microsoft. \r"
    },
    {
        "Question": "Q)  What do you use to debug C#?\r",
        "Answer": "A)  VS, VS Code, or other C# IDE such as JetBrains or OzCode.  I think VS is the most robust and key debugging features are:  breakpoints, watch windows, immediate window, step through code, exception handling, other debugging for profiling, memory analysis, and performance tuning. VS also has Intellisence and Co-pilot, more notably, that assist with syntax. \r"
    },
    {
        "Question": "Q) What is a Null Reference Exception?\r",
        "Answer": "A) NRE or Null Pointer Exception (NPE) in other programming languages, is a common runtime exception that occurs when a program attempts to access or manipulate an object or a member (such as a property, method, or field) of an object that has a null value.  In C#, this exception is represented by the NullReferenceException class.\r"
    },
    {
        "Question": "Q)  What is an MVC View?\r",
        "Answer": "A)  The View, in MVC, is responsible for rendering the user interface elements, such as HTML markup, forms, controls, and templates. It defines how data from the Model shold be displayed to the user.\r"
    },
    {
        "Question": "Q)  What the Model in MVC?\r",
        "Answer": "A)  The Model, in MVC design pattern, represents the component responsible for manageing the applications data, business logic, and state.  It serves as the applications information store and encapsulates the underling data and rules for manipulating that data.  \r"
    },
    {
        "Question": "Q)  What are C# extension methods?\r",
        "Answer": "A)  C# extension methods add new methods to existing types with modifying their source code.  For example, in the line \"int length = text.CustomLength();\", CustomLength() is a C# extension method.\r"
    },
    {
        "Question": "Q)  What are Interfaces?\r",
        "Answer": "A)  An interface is a fundamental concept in OOP that defines a contract or set of abstract methods and properties that a class must implement.  For instance, what signature appears in ILogger.cs must be implemented is the Logger.cs class.\r"
    },
    {
        "Question": "Q)  What is an abstract class and is this different than an interface?\r",
        "Answer": "A)  Ab abstract class and an interface are both OOP concepts but serve different purposes.  An abstract class serves as a blue print for other classes.  An interface defines a contract that classess must adhere with regard to the methods, properties, events, or indexes that implementing class must provide.  \r"
    },
    {
        "Question": "Q)  Can you create an instance of an abstract class?\r",
        "Answer": "A)  No.  An abstract class can not be instanciated on its own but is designed to serve as a base class for other classes to provide a blueprint for dervived classes.  \r"
    },
    {
        "Question": "Q)  Describe object-oriented programming?\r",
        "Answer": "A)  OOP is a programming paradigm that uses objects as the fundamental building blocks for designing and organizing code.\r"
    },
    {
        "Question": "Q)  What are the principles of object-oriented programming?\r",
        "Answer": "A)  Four OOP principles are:  Encapsulation, Inheritances, Polymorphism, and Abstraction.\r"
    },
    {
        "Question": "Q)  Describe Encapsulation in OOP?\r",
        "Answer": "A)  Encapsulation is the concept of bundling data (attributes or properties) and methods (functions or procedures) that operate on that data into a single unit called an \"obect\".\r"
    },
    {
        "Question": "Q)  Describe Inheritances in OOP?\r",
        "Answer": "A)  Inheritance allows you create a new class (subclass) based on an existing class (superclass or base class).  The subclass inherits the attributes and methods of the superclass.\r"
    },
    {
        "Question": "Q)  Describe Polymorphism in OOP?\r",
        "Answer": "A)  Polymorphism enables objects of different classes to be treated as objectives of a common superclass.  Polymorphism is achieved by method overriding and method overloading.\r"
    },
    {
        "Question": "Q)  Describe Abstraction in OOP?\r",
        "Answer": "A)  Abstraction is the process of simplifying complex systems by modeling them using abstract classes or interfaces.\r"
    },
    {
        "Question": "Q)  What is method overriding as a mechanism of polymorphism?\r",
        "Answer": "A)  Method overriding occurs when a subclass provides its own implementation of a method that is already defined in the superclass.\r"
    },
    {
        "Question": "Q)  What is method overloading as a mechanism of polymorphism?\r",
        "Answer": "A)  Method overload is a mechanism that enables a class to define multiple methods with the same name but different parameter list with the same class.  Also known as compile-time polymorphism.\r"
    },
    {
        "Question": "Q)  Write out an example class diagram for the objects described.  Classes: Base person, Employee, Manager, Robot.  Interface that implements both:  People, Robots.   Include an example of an abstract method and an abstract class.  Provide an example of how you leverage inheritance.  \r",
        "Answer": "A)  See Class Diagram extended answer file entitled classDiagramAnswer.txt.\r"
    },
    {
        "Question": "Q)  What is a class diagram?\r",
        "Answer": "A)  A class diagram is a graphical representation of the structure and relationships of classes and interfaces in an object-oriented system or software application.  It is one of the Unified Modeling Language (UML) diagrams used for visualizing and designing software systems, particularly in object-oriented programming.  See Class Diagram extended answer file entitled classDiagramAnswer.txt.\r"
    },
    {
        "Question": "Q)  What is the significance of \"+\" or \"-\" in class diagrams?\r",
        "Answer": "A)  Indicates access modifiers.  \"+\" = Public Access, \"-\" = Private Access, \"#\" = Protected Access, \"~\" = Package or Default Access.\r"
    },
    {
        "Question": "Q)  What are Generics in .NET?\r",
        "Answer": "A)  Generics are a C# langugage feature introduced to .NET as part of the Common Language Runtime (CLR).  Generics are deeply integreated into the .NET ecosystem.  Generics allow creation of classes, methods, and data structures that work with types as parameters.  There are generic collection classes in the 'System.Collections.Generics' namespace but generics extend beyond just collections and are a language level feature in the core of .NET.  Examples of Generics from the collection classes include 'List<T>', 'Dictionary<TKey, TValue>' and 'Queue<T>'.  Generics are commonly used with delegates like 'Func<T, TResult>' and 'Action<T>' to create functions and actions.\r"
    },
    {
        "Question": "Q)  What are delegates in C#?\r",
        "Answer": "A)  Delegates are a type that respresents references to methods with a particular signature.  Delegates enable you to pass methods as parameters to other methods, store them in variables, and invoke them dynamically.  Delegates are essential for implementing callback mechanisms, event handling, and achieving losse coupling in C#.\r"
    },
    {
        "Question": "Q)  Why are Generics so important?\r",
        "Answer": "A)  These are the ten reasons: (1) Type Safety, (2) Code Reusability, (3) Performance, (4) Flexibility, (5) Reduced Code Duplication, (6) Strongly Typed Collections, (7) Algorithm and Data Structure Independence, (8) Easier Maintenance, (9) Library and Framework Design, (10) Compile-Time Error Detection.\r"
    },
    {
        "Question": "Q)  What is IEnumerable and what significance does it hold?\r",
        "Answer": "A)  IEmumerable is an interface in C# and .NET that represents a collection of objects that can be enumerated or iterated through.  It is part of the System.Collections namespace.\r"
    },
    {
        "Question": "Q)  In .Net how many classes can one class inherit from?\r",
        "Answer": "A)  One.  This is known as single inheritance.  This differs from C++ which allows multiple inheritances.  C# can achieve a form of multiple inheritance through the use of Interfaces. This allows a Class to inherit behavior from multiple interfaces.\r"
    },
    {
        "Question": "Q)  How do you declare a variable in C#?\r",
        "Answer": "A)  The basic syntax is data_type variable_name.  There variations bases on Value Type, Reference Type, Initializing Variables, Implicity Typed Variables, Multiple Declarations, Read-Only Variables, Constraints, Nullable Types, Using Explicity Types with Implicit Initialization, and Dynamic Types. \r"
    },
    {
        "Question": "Q)  What does it mean to be a strongly typed language?\r",
        "Answer": "A)  There are strict rules about data types and type safety.  Variables, expressions, and operations must adhere to a specific data type and type-related errors are typically caught at compile time rather than at runtime.  Features of a strongly typed language are (1) Type Checking at Compile Time, (2) Explicity Type Declarations, (3) Type Safety, (4) Strict Conversions (Casting), (5) Predictable Behavior, (6) Improved Code Quality, (7) Performance Benefits.\r"
    },
    {
        "Question": "Q)  How can you test if an instance of an object implements a particular interface?\r",
        "Answer": "A)  'is' or 'as\" keywords used in a if statement will check whether an object is an instance of a particular type or implements a specific interface.  'is' returns a bool.   'as' returns the type or null.\r"
    },
    {
        "Question": "Q)  What is a static member or property in .Net?\r",
        "Answer": "A)  A static member or property is shared across all instances of a type and are accessed through the type itself, rather than through an object instance.  \r"
    },
    {
        "Question": "Q)  What does your typical error handling code look like?\r",
        "Answer": "A)  In C#, typical error handling involves try-catch blocks to handle exceptions.  The try portion contains the code that may throw an exception.  The catch portion contains the logging, message display, or other action upon error.  There can be multiple catch statements.  try-catch block may include an optional finally statement that closes resources, releases memory, or performs other cleanup tasks.\r"
    },
    {
        "Question": "Q)  What is the Web.Config/ApplicationSettings.json? What do you use it for?\r",
        "Answer": "A)  Web.config and appsettings.json are configuration files commonly used in .NET applications to store various configuration settings, including application-specific settings, connection strings, and other configuration data.  Web.config is an XML configuration file used for authentication, authorization, custom error pages, etc.  appsettings.json is a JSON configuration file that stores application specific settings and configuration data.\r"
    },
    {
        "Question": "Q)  What is Authorization? At what level does it typically happen your application?\r",
        "Answer": "A)  Authorization is a computer security and software development concept.  It refers to the process of determining whether a user, system, or entity has permission or right to access a particular resource, perform an action, or execute an operation within the application or system.\r"
    },
    {
        "Question": "Q)  How does one implement this? (Make sure only known users are allowed to execute code)\r",
        "Answer": "A)  Implementing security measures to make sure only known users are allowed to execute code involves several steps and best practices.  Process consists of Authentication & Authorization, User Management, Database Roles, Object-Level Permissions, Execution Context, Stored Procedures & Views, Dynamic SQL, Audit & Monitoring, Regular User Access Reviews, Network Security, Updates & Patching, Security Best Practices, and Security Training & Awareness.\r"
    },
    {
        "Question": "Q)  How does the webserver know who you are across different web requests?\r",
        "Answer": "A)  Identifies and maintains a user's identity across different web requests using various mechanisms and technologies.  These are the common ways:  Cookies, Session Managmenet, HTTP Authentication, URL Parameters, Client IP Address, Token-Based Authentication (OAuth, JWTF), and Persistent Login (Remember Me functionality)\r"
    },
    {
        "Question": "Q)  Would this method work if you were to switch out browsers in the middle of a session?\r",
        "Answer": "A)  Cookies, Session Management, HTTP Authentication, URL Parameters won't help if user switches browsers. Client IP Address, Token-Based Authentication, and Persistent Login can provide continuity across different browsers with tokens that persist across browsers.\r"
    },
    {
        "Question": "Q)  How would you declare an array in C#?\r",
        "Answer": "A)  Basic syntax is \"dataType[] arrayName;\"  There are variations:  \"int[] numbers;\"  to declare an array of numbers.  \"string[] names;\" to declare an array of strings.  \"Person[] people;\" to declare an array of objects.  Once the array is declared, it can be initialized with data.  Array's can be created and initialized at the same time.  For instance, int[] numbers ={1,2,3,4,5,6}; \r"
    },
    {
        "Question": "Q)  What are Collections in .Net?\r",
        "Answer": "A)  Collections are classes and data structures that allow you to store, manage, and manipulate groups of related objects.  Common collection types in .NET include:  Arrays, Lists(List<T>), Dictionaries(Dictionary<TKey, TValue>), Sets(Hash<T>), Queues(Queue<T>), Stacks(Stack<T>), LinkedList(LinkedList<T>), BitArray, Specialized Collections such are SortedSet<T>, SortedDictionary<TKey, TValue>, ConcurrentDictionary<TKey, TValue>.\r"
    },
    {
        "Question": " Q)  What are Connection Strings?\r",
        "Answer": " A)  A configuration string that provides the necessary infomration for a software application to establish a connection to a database or another data source.  Connection strings contain key-value pairs that specify details such as the database's server location, authentication credentials, database name, and other parameters required to establish a connection.  \r"
    },
    {
        "Question": " Q)  What are the different parts of a Connection String?\r",
        "Answer": " A)  A typical connection string contains:  Data Source, Initial Catalog (Database Name), User ID (Username), Password, Integrated Security (Windows Authentication), Connection Timeout, Provider (for OLE DB or ODBC), and other Parameters.\r"
    },
    {
        "Question": " Q)  What are Nullable Types?\r",
        "Answer": " A)  Nullable types, also referred to as nullable values, are a feature of C# and other .NET languages that allow you to represent value types with the possibility of having a \"null\" value in addition to the normal range of values.   Nullable types are achieve by appending a ? to underlying value type.  For example, int?, double?, and bool?\r"
    },
    {
        "Question": " Q)  How do you access the underlying value of a Nullable Type?\r",
        "Answer": " A)  .Value property of nullable variable should be used in a if-else statement.  \r"
    },
    {
        "Question": " Q)  How do you store Flags in an Enum?\r",
        "Answer": " A)  Use a combination of bitwise operators and attribute decoration to indicate that the enum is meant to represent flags. This is an example: [Flags] enum MyFlags {None = 0, Flag1 = 1, Flag2 = 2, Flag3 = 4, Flag4 = 8 }\r"
    },
    {
        "Question": " Q)  What are the first 4 numeric values of an Enum used to store Flags?\r",
        "Answer": " A)  Flag numeric values are powers of 2; so, 1, 2, 4, 8.  This is because each value should represent a single bit in a binary representation, allowing the combination of flags in bitwise operation.\r"
    },
    {
        "Question": " Q)  How do you send email on the server?\r",
        "Answer": " A)  Involves a programming language or a framework to interact with an email server (SMTP server) to compose and deliver emails.   C# can be used in a Class to connect to an SMTP server and send mail using the System.Net.Mail library and the 'SmtpClient' Class.\r"
    },
    {
        "Question": " Q)  What is the best way to concatenate strings in .Net and why?\r",
        "Answer": " A)  There are several ways to concatenate strings in .NET, each with its advantages.  Ways are:  Using the '+' Operator, Using the 'string.Concat' method, Using 'StringBuilder', String Interpolation.\r"
    },
    {
        "Question": " Q)  Write a C# function that accepts an array of integers, adds all the members, and returns the result.\r",
        "Answer": " A)  public int AddArray( int[] ArrayList){int sum = 0; foreach (int number in numbers){ArraySum += number;}return ArraySum}. A more complete demonstration is:  using System; class Program { static int SumArray(int[] numbers){int sum = 0; foreach (int number in numbers){sum += number;}return sum;} static void Main(){int[] numbers = { 1, 2, 3, 4, 5 }; int result = SumArray(numbers); Console.WriteLine(\"The sum of the array is: \" + result);}}\r"
    },
    {
        "Question": " Q)  In an API application, what information is used to route your request?\r",
        "Answer": " A)  HTTPMethod(Verb), URL, HTTP Headers, Request Body, Routing Configuration, Authentication & Authorization, Middleware & Routing Handlers, Request Parameters.\r"
    },
    {
        "Question": " Q)  What are Prop Types?\r",
        "Answer": " A)  In React, propTypes are an object that contains key-value pairs where the key is the name of property and the value is the expected type of the value of this property.  Defined props imposes requirements.\r"
    },
    {
        "Question": "Q)  What is React?\r",
        "Answer": "A)  A JavaScript library.  React is an open-source JavaScript library used for building user interfaces, particularly for single-page-applications (SPA).  \r"
    },
    {
        "Question": "Q)  What are the key features of React?\r",
        "Answer": "A)  Declarative UI; Component-Based Architecture; Learn Once, Write Anywhere; Virtual DOM, and JSX.  \r"
    },
    {
        "Question": "Q)  In calling setState, when would you pick one method of calling this function over the other?\r",
        "Answer": "A)  Passing an Object and Passing a Function. Example of Passing an Object:  this.setState({count:1}); Example of Passing a Function:  this.setState((prevState, props)=>{return{count: prevState.count + 1};});\r"
    },
    {
        "Question": "Q)  Is setState a synchronous or async call?\r",
        "Answer": "A)  Asynchronous.  When you call call 'setState', React batches state changes for performance reasons.  Batching means that after call 'setState', the state may not immediately reflect the new value. React will eventually update the component with the new state and re-render the component.\r"
    },
    {
        "Question": "Q)  What are the different ways that you can call setState ?\r",
        "Answer": "A)  Passing an Object and Passing a Function.\r"
    },
    {
        "Question": "Q)  Higher level component. \r",
        "Answer": "A)  Takes in a component and returns a new component.  It returns a components with higher level functionality.\r"
    },
    {
        "Question": "Q)  What is a synthetic event in React?\r",
        "Answer": "A)  It is a cross-browser wrapper around the browser's native event.  It's API is similar to the browser's native event, including stopPropagation() and preventDefault(), except the events work identically across all browsers.\r"
    },
    {
        "Question": "Q)  What is a declarative UI\r",
        "Answer": "A)  A declarative UI is a programming paradigm that focuses on describing the desired result of a computation rather than the steps to achieve it.  React is a declarative UI library.\r"
    },
    {
        "Question": "Q)  What are higher order components used for?\r",
        "Answer": "A)  HOCs are a design patten in React.  They are used to enhance the functionality and reusability of components.   HOCs are used for these purposes:  Code reusability, props manipulation, conditional rendering, state management, side effects, abstraction of complex logic, higher order component composition, and testing.\r"
    },
    {
        "Question": "Q)  What are keys in React?\r",
        "Answer": "A)  Unique indentifiers that allow React to keep track of which items have changed, are added, or are removed from a list.  Keys are used to identify which items in the list are changed, updated, or deleted.  Keys are important for performance reasons.  Keys should be unique among siblings, but they don't need to be globally unique.  Keys should be stable, predictable, and not change over time.  \r"
    },
    {
        "Question": "Q)  What is the difference between a controlled and uncontrolled component?\r",
        "Answer": "A)  A controlled component is a component that renders form elements and controls them by keeping the form data in the component's state.  An uncontrolled component is a component that renders form elements and controls them by using the DOM API to access the form elements.  Controlled components are preferred over uncontrolled components because they provide better control over the form elements and their values.\r"
    },
    {
        "Question": "Q)  What is the difference between a functional and class component?\r",
        "Answer": "A) A functional component is a function that accepts props and returns a React element.  A class component is a class that extends React.Component and has a render method.  Functional components are preferred over class components because they are simpler, easier to test, and provide better performance.\r"
    },
    {
        "Question": "Q)  What is React Memo?\r",
        "Answer": "A)  React.memo is a higher order component that allows you to memoize the result of a function component.  Memoization is an optimization technique that caches the result of a function call and returns the cached result when the same input is provided again.  React.memo is similar to React.PureComponent but for function components instead of classes.\r"
    },
    {
        "Question": "Q) What is a Contstructor in React?\r",
        "Answer": "A) A constructor is a special method that is called when a class is instantiated.  It is used to initialize the class's properties and bind class methods.  In React, the constructor is used for two purposes:  Initializing the local state by assigning an object to this.state, and Binding event handler methods to an instance.\r"
    },
    {
        "Question": "Q) What is JSX?\r",
        "Answer": "A) JSX is JavaScript XML.  It is a syntax extension to JavaScript that allows you to write HTML-like syntax in JavaScript and is transformed into valid HTML by Babel.  JSX is an XML/HTML-like syntax used by React that extends ECMAScript so that XML/HTML-like text can co-exist with JavaScript/React code.  JSX is not a requirement for using React.  It is a syntax extension to JavaScript and is recommended by React but not required.\r"
    },
    {
        "Question": "Q) What is the virtual DOM? Explain how it works within ReactJS.\r",
        "Answer": "A) The is virtual DOM is a copy of the actual DOM.  The virtual DOM represents a lightweight copy of the actual DOM (Document Object Model). It works by creating a virtual representation of the DOM in memory and using it to efficiently update and manipulate the real DOM.\r"
    },
    {
        "Question": "Q) Why can�t browsers read JSX?\r",
        "Answer": "A) Browsers can't read JSX because JSX is not a standard web technology. It's a syntax extension used by React to describe user interfaces. JSX needs to be transpiled into standard JavaScript before it can be executed in browsers.\r"
    },
    {
        "Question": "Q) How different is React�s ES6 syntax when compared to ES5?\r",
        "Answer": "A) ES6 is significantly different from ES5.  ES6 introduces several modern JavaScript features and improvements. Some key differences include the use of classes, arrow functions, and the import and export statements for module management, which provide a more structured and organized way to write React components and applications.\r"
    },
    {
        "Question": "Q) Differentiate between Real DOM and Virtual DOM.Real DOM vs Virtual DOM?\r",
        "Answer": "A) Real DOM represents the actual web page structure and content in the browser, while Virtual DOM is an in-memory, lightweight copy of the Real DOM. React uses the Virtual DOM to efficiently update and manipulate the Real DOM, reducing performance bottlenecks and improving web application speed.\r"
    },
    {
        "Question": "Q) What do you understand from �In React, everything is a component.�\r",
        "Answer": "A) In React, \"everything is a component\" means that user interfaces are built by composing reusable and self-contained building blocks called components. Each part of the UI, from simple buttons to complex widgets, is encapsulated within a component, promoting modularity and reusability in application development.\r"
    },
    {
        "Question": "Q) Explain the purpose of render() in React.\r",
        "Answer": "A) The render() method in React is used to define what should be displayed on the screen. It returns a description of the UI based on the component's current state and props. React uses this description to update the actual DOM, ensuring it reflects the component's desired appearance.\r"
    },
    {
        "Question": "Q) What is the Singleton and was are the drawbacks?\r",
        "Answer": "A) Singleton is a design pattern that restricts the instantiation of a class to one object.  The singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The term comes from the mathematical concept of a singleton.  Drawbacks are:  Global state, tight coupling, and concurrency.\r"
    },
    {
        "Question": "Q) What is dependency injection?\r",
        "Answer": "A) Dependency injection is a technique whereby one object (or static method) supplies the dependencies of another object. A dependency is an object that can be used (a service). An injection is the passing of a dependency to a dependent object (a client) that would use it. The service is made part of the client's state. Passing the service to the client, rather than allowing a client to build or find the service, is the fundamental requirement of the pattern.\r"
    },
    {
        "Question": "Q) What is a Model View Controller?\r",
        "Answer": "A) Model�view�controller (usually known as MVC) is a software design pattern commonly used for developing user interfaces that divides the related program logic into three interconnected elements. This is done to separate internal representations of information from the ways information is presented to and accepted from the user. The MVC design pattern decouples these major components allowing for efficient code reuse and parallel development.\r"
    },
    {
        "Question": "Q) Short, concise answer to:  How can you embed two or more components into one?\r",
        "Answer": "A) You can embed two or more components into one by combining their functionality and appearance within a single container or parent component.\r"
    },
    {
        "Question": "Q) What is Props?\r",
        "Answer": "A) Props (short for properties) are a way to pass data from a parent component to a child component in React and other similar component-based frameworks.\r"
    },
    {
        "Question": "Q) What is a state in React and how is it used?\r",
        "Answer": "A) State in React is a JavaScript object used to store and manage data that can change over time within a component. It's used to maintain and update the component's dynamic behavior and re-render it when the state changes, ensuring the user interface reflects the latest data or user interactions.\r"
    },
    {
        "Question": "Q) How can you update the state of a component?\r",
        "Answer": "A) You can update the state of a component in React by using the `setState` method, which allows you to modify the state's values and trigger a re-render of the component with the updated state data.\r"
    },
    {
        "Question": "Q) What is arrow function in React? How is it used?\r",
        "Answer": "A) An arrow function in React is a concise way to define functions. It's often used for defining event handlers and functional components. Arrow functions have a lexical this, making them convenient for accessing the component's context and state. \r"
    },
    {
        "Question": "Q) Differentiate between stateful and stateless components. Stateful vs Stateless Components React\r",
        "Answer": "A) Stateful components (also known as class components) in React can manage and update their own state data using the setState method. They have a render method and can hold and modify data over time. Stateless components (also known as functional components) do not manage state. They receive data (props) as input and return JSX elements based on that data. They are purely presentational and do not have their own state management logic.\r"
    },
    {
        "Question": "Q) What are the different phases of React component’s lifecycle?\r",
        "Answer": "A) The different phases of a React component's lifecycle are mounting, updating, unmounting. \r"
    },
    {
        "Question": "Q) Explain the lifecycle methods of React components in detail.\r",
        "Answer": "A) React calls different functions automatically at different points within each phase of Component Lifecycle.  Examples include constructor(), render(), componentDidMount(), shouldComponentUpdate(), etc.  These methods are used to control and manage a component's behavior during its lifecycle.\r"
    },
    {
        "Question": "Q) What is an event in React?\r",
        "Answer": "A) In React, an event is a user action or interaction, such as clicking a button or typing in an input field, that triggers a response in the application, often leading to updates in the component's state or the user interface. Event handling in React is typically done using event listeners and functions to respond to these user actions.\r"
    },
    {
        "Question": "Q) How do you create an event handler in React?\r",
        "Answer": "A) To create an event handler in React, define a JavaScript function to handle the event and attach it to an HTML element using an event attribute like `onClick`, specifying the function as the handler.\r"
    },
    {
        "Question": "Q) What are synthetic events in React?\r",
        "Answer": "A) Synthetic events in React are cross-browser wrappers around native browser events. They provide a consistent and predictable way to handle events, abstracting browser-specific differences and quirks. Developers can use them in React components to handle user interactions like clicks, key presses, and form submissions.\r"
    },
    {
        "Question": "Q) What is a ref in React?\r",
        "Answer": "A) A ref in React is a way to access and interact with a DOM element or a React component directly. It allows you to reference elements and components and is often used for tasks like focusing input fields, triggering animations, or reading values from the DOM.\r"
    },
    {
        "Question": "Q) List some of the cases when you should use Refs.\r",
        "Answer": "A) You should use refs in React when you need to: (1) Access DOM elements directly.  (2) Trigger imperative animations or actions.  (3) Integrate with third-party libraries that require direct DOM manipulation.  (4) Manage focus, such as focusing on input fields.  (5) Measure the size or position of an element.  (6) Implement custom logic or interactions that can't be achieved with state or props alone.\r"
    },
    {
        "Question": "Q) How do you moularize code in React?\r",
        "Answer": "A) You can modularize code in React by creating reusable components. Break down your UI into smaller, self-contained components that encapsulate specific functionality or appearance. Then, import and use these components wherever needed in your application, promoting code reusability and maintainability.\r"
    },
    {
        "Question": "Q) How are forms created in React?\r",
        "Answer": "A) Forms in React are created using HTML form elements like `form`, `input`, `textarea`, and `button`, and you manage form data using React state. Event handlers like `onChange` are used to capture and handle user input, updating the component's state accordingly.\r"
    },
    {
        "Question": "Q) What do you know about controlled and uncontrolled components?\r",
        "Answer": "A) Controlled components in React are form elements whose values are controlled by React state. Their values are set and updated through state, and changes are handled via event handlers.  Uncontrolled components are form elements where the DOM element itself holds the state, not React. You typically use refs to access their values when needed. Controlled components offer more control and are recommended for most use cases, while uncontrolled components may be useful in certain situations where you want to integrate with non-React code or manage state externally.\r"
    },
    {
        "Question": "Q) What is Higher OrderComponents(HOC)?\r",
        "Answer": "A) A Higher Order Component (HOC) in React is a function that takes a component and returns a new component with additional props, behavior, or functionality. HOCs are used for code reuse, cross-cutting concerns like authentication or logging, and enhancing components without modifying their original code.\r"
    },
    {
        "Question": "Q) What can you do with HOC?\r",
        "Answer": "A) With Higher Order Components (HOCs) in React, you can:  (1) Reuse component logic across multiple components.  (2) Add or modify props, behavior, or state to components. (3) Implement cross-cutting concerns like authentication, logging, or routing. (4) Encapsulate and enhance component functionality without altering the original component code. (5) Create more modular and maintainable code by separating concerns.\r"
    },
    {
        "Question": "Q) What is the significance of keys in React?\r",
        "Answer": "A) Keys in React are used to uniquely identify and track individual elements in a list or collection of elements rendered in a component. They help React efficiently update the DOM when the list changes, ensuring proper rendering and performance optimizations.\r"
    },
    {
        "Question": "Q) What is React Router?\r",
        "Answer": "A) React Router is a popular library for handling routing and navigation in React applications. It allows you to create single-page applications with multiple views, enabling users to navigate between different parts of the app without full-page refreshes.\r"
    },
    {
        "Question": "Q) Why is Switch component used in React Router v4?\r",
        "Answer": "A) The `Switch` component in React Router v4 is used to ensure that only one route is matched and rendered at a time. It helps prevent multiple route components from being displayed simultaneously, ensuring that the first matching route is the only one rendered.\r"
    },
    {
        "Question": "Q) Why do we need a Router in React?\r",
        "Answer": "A) We need a Router in React to enable navigation and manage different views or pages within a single-page application (SPA). It allows users to switch between different parts of the app without full page reloads, providing a smoother and more interactive user experience.\r"
    },
    {
        "Question": "Q) List down the advantages of ReactRouter.\r",
        "Answer": "A) The main Advantages of React Router are: (1) Client-Side Routing: Enables client-side navigation without full page reloads for a smoother user experience. (2) Nested Routing: Supports nesting of routes for complex application structures.  (3) Dynamic Routing: Allows dynamic route matching and generation based on data or props.  (4) Declarative Configuration: Route definitions are declarative, making it easy to set up and understand.  (5) History Management: Handles browser history and provides programmable navigation.  (6) Integration: Works seamlessly with React applications and state management libraries.  (7)  Community Support: Well-documented and widely adopted, with a large community and ecosystem.  (8) Code Splitting: Supports lazy loading and code splitting for improved performance.  (9) Middleware: Can be extended with middleware for additional functionality.  (10) Server-Side Rendering (SSR): Supports SSR for SEO optimization and initial page load performance.\r"
    },
    {
        "Question": "Q) How is React Router different from conventional routing?\r",
        "Answer": "A) React Router is different from conventional routing in web development because it enables client-side routing within a single-page application (SPA) without full page reloads. Conventional routing typically involves server-side routing, where each route corresponds to a separate server request, resulting in full page refreshes. React Router, on the other hand, handles routing on the client side, providing a smoother and more interactive user experience within a single HTML page.\r"
    },
    {
        "Question": "Q) What is React.memo ?\r",
        "Answer": "A) `React.memo` is a higher-order component (HOC) that is used for optimizing functional components. It memoizes, or caches, the result of a component's rendering so that it only re-renders when its props change. This can help improve performance by preventing unnecessary renders of a component when its inputs remain the same.\r"
    },
    {
        "Question": "Q) What is the difference between calling a promise and using a '.then' vs using 'await'\r",
        "Answer": "A) The difference between calling a promise using `.then` and using `await` is in how you handle asynchronous operations:  (1) `.then`: It involves chaining `.then` methods to handle the result or error of a promise sequentially. This is more callback-style and can lead to \"callback hell\" with deeply nested code.  (2) `await`: It's used inside an `async` function to pause execution until the promise is resolved. It provides a more linear and readable code structure, especially when dealing with multiple asynchronous operations.  Using `await` often leads to cleaner and more maintainable asynchronous code.\r"
    },
    {
        "Question": "Q) What are required properties of the object in your package.json file?\r",
        "Answer": "A) In a `package.json` file, the only required property is `\"name\"`. This property specifies the name of the package or project. Other properties like `\"version\"` and `\"dependencies\"` are commonly included but not strictly required.\r"
    },
    {
        "Question": "Q) What is NPM/Yarn?\r",
        "Answer": "A) NPM (Node Package Manager) and Yarn are package managers for JavaScript and Node.js. They are used to install, manage, and share packages (libraries and modules) of code from the Node Package Registry (NPM) or other sources. These packages can be dependencies for web and Node.js applications, making it easier to manage project dependencies and streamline the development process.\r"
    },
    {
        "Question": "Q) Can different versions of the same package be used in the same application?\r",
        "Answer": "A) Yes, different versions of the same package can be used in the same application. This is possible due to the concept of \"dependency resolution\" in package managers like NPM and Yarn. Each package can have its own specific version, and the package manager handles the resolution and isolation of dependencies, ensuring that they do not interfere with each other.\r"
    },
    {
        "Question": "Q) In package.json, how can you ensure that only patch version updates are accepted when npm install is run? (i.e. upgrading from 2.3.0 to 2.3.1 is okay, but not 2.4.0 or greater)\r",
        "Answer": "A) To ensure that only patch version updates are accepted when running `npm install`, you can specify a dependency with a tilde (`~`) in your `package.json` file. This tells npm to only allow updates that are backward-compatible (i.e., it allows patch updates but not minor or major updates). So, upgrading from 2.3.0 to 2.3.1 is allowed, but upgrading to 2.4.0 or greater would require changing the tilde to a caret (`^`) if you want to allow minor updates as well.\r"
    },
    {
        "Question": "Q) How come when you declare a variable in any js or jsx file outside of any class, object, or function, it’s not really global to all other files, components?\r",
        "Answer": "A) In JavaScript or JSX files, when you declare a variable outside of any class, object, or function, it becomes part of the global scope only for that specific file. It is not automatically accessible in other files or components because JavaScript uses a module system that encapsulates variables within the scope of the module (file). To make a variable accessible across multiple files or components, you typically export and import it explicitly using the module system.\r"
    },
    {
        "Question": "Q) What are Pure Components?\r",
        "Answer": "A) Pure Components in React are a type of class component that automatically optimizes rendering performance. They do a shallow comparison of props and state to determine if rendering is necessary, preventing unnecessary re-renders and improving application efficiency.\r"
    },
    {
        "Question": "Q) What are the features of React?\r",
        "Answer": "A) Key features are (1) **Component-Based:** UI is broken into reusable components. (2) **Virtual DOM:** Efficient updates by comparing virtual and real DOM. (3) **Unidirectional Data Flow:** Data flows in one direction for predictability. (4) **JSX:** Syntax extension for defining UI components in JavaScript. (5) **Declarative:** Describes the desired UI, not the steps to achieve it. (6) **Performance:** Optimized rendering for efficient apps. (7) **React Native:** Builds mobile apps with React for multiple platforms. (8) **Ecosystem:** Large community, libraries, and tools for development."
    }
]